image: Visual Studio 2017

# Skip build on normal pushes
skip_non_tags: true

artifacts:
  - path: godot\godot.windows.*.zip
    name: GodotBinary
  - path: godot\bin\*gdnative_wrapper_code*.lib
    name: GodotGDNativeWrapper

environment:
  BUILD_NAME: official
  VS: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Auxiliary\Build\vcvarsall.bat
  PYTHON: C:\Python27
  ANGLE_SRC_PATH: C:\projects\godot-builds\angle
  MONO32_PREFIX: "C:\\Program Files (x86)\\Mono"
  MONO64_PREFIX: "C:\\Program Files\\Mono"
  matrix:
    - GD_PLATFORM: windows
      TOOLS: yes
      TARGET: release_debug
      ARCH: amd64
    - GD_PLATFORM: windows
      TOOLS: yes
      TARGET: release_debug
      ARCH: x86
#    - GD_PLATFORM: windows
#      TOOLS: no
#      TARGET: release
#      ARCH: amd64
#    - GD_PLATFORM: windows
#      TOOLS: no
#      TARGET: release_debug
#      ARCH: amd64
#    - GD_PLATFORM: windows
#      TOOLS: no
#      TARGET: release
#      ARCH: x86
#    - GD_PLATFORM: windows
#      TOOLS: no
#      TARGET: release_debug
#      ARCH: x86
#    - GD_PLATFORM: uwp
#      TOOLS: no
#      TARGET: release
#      ARCH: amd64
#    - GD_PLATFORM: uwp
#      TOOLS: no
#      TARGET: release_debug
#      ARCH: amd64
#    - GD_PLATFORM: uwp
#      TOOLS: no
#      TARGET: release
#      ARCH: x86
#    - GD_PLATFORM: uwp
#      TOOLS: no
#      TARGET: release_debug
#      ARCH: x86
#    - GD_PLATFORM: uwp
#      TOOLS: no
#      TARGET: release
#      ARCH: amd64_arm
#    - GD_PLATFORM: uwp
#      TOOLS: no
#      TARGET: release_debug
#      ARCH: amd64_arm

install:
  - set "PATH=%PYTHON%;%PYTHON%\\Scripts;%PATH%"
  - pip install --egg scons  # it will fail on AppVeyor without --egg flag
  - if defined VS call "%VS%" %ARCH%  # if defined - so we can also use mingw
  - git submodule update --init --recursive # download submodules
  - ps: >-
      If ($env:GD_PLATFORM -Match "uwp") {
        Start-FileDownload https://github.com/GodotBuilder/godot-builds/releases/download/_tools/angle.7z
        7z.exe x angle.7z
      }
  - ps: >-
      If ($env:ARCH -Match "x86") {
        Start-FileDownload https://download.mono-project.com/archive/5.4.1/windows-installer/mono-5.4.1.7-gtksharp-2.12.45-win32-0.msi
        Start-Process msiexec.exe -Wait -ArgumentList '/qn /i C:\projects\godot-builds\mono-5.4.1.7-gtksharp-2.12.45-win32-0.msi'
      } Else { # 64-bit
        Start-FileDownload https://download.mono-project.com/archive/5.4.1/windows-installer/mono-5.4.1.7-x64-0.msi
        Start-Process msiexec.exe -Wait -ArgumentList '/qn /i C:\projects\godot-builds\mono-5.4.1.7-x64-0.msi'
      }

before_build:
  - echo %BUILD_NAME%
  - echo %GD_PLATFORM%
  - python --version
  - scons --version
  - cl.exe
  - if "%ARCH%" == "x86" (
      call "%MONO32_PREFIX%\bin\mono.exe" --version
    ) else (
      call "%MONO64_PREFIX%\bin\mono.exe" --version
    )

build_script:
  - cd godot
  - for /f %%p in ('dir /b ..\patches') do git apply ..\patches\%%p
  - git rev-parse HEAD
  - ps: Move-Item C:\projects\godot-builds\mono\mono_glue.gen.cpp C:\projects\godot-builds\godot\modules\mono\glue\ -force
  - scons platform=%GD_PLATFORM% target=%TARGET% tools=%TOOLS% progress=no warnings=no verbose=no gdnative_wrapper=yes module_mono_enabled=yes

after_build:
  - 7z a godot.%GD_PLATFORM%.%ARCH%.7z bin/*godot*.exe bin/*.dll

deploy:
  description: 'Godot binaries deployed by Travis CI and AppVeyor'
  provider: GitHub
  auth_token:
    secure: DYTTAkQFPIDq2YL6hPMOttlHdJ9ZL6dYdOtGFIEneO8BTYx6keJRvewsdzgP2QGA
  artifact: GodotBinary, GodotGDNativeWrapper
  on:
    appveyor_repo_tag: true
